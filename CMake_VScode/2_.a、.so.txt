静态库：编译，生成可执行文件的时候，直接把静态库放到bin里去了
动态库：编译，生成可执行文件的时候，只是做了一个链接，等你用的时候才把动态库加载进来

静态库：libxxx.a，基本可以理解为编译后的二进制代码，类似.o，我们做编译一般都是编译+链接，源文件也就是.c文件，先编译生成.o文件，然后再链接生成可执行文件，静态库基本可以理解成多个.o合并起来的结果，使用方式几乎和.o相同，静态库有什么特点呢
1.开源软件用动态库链接和静态库链接的区别，静态库链接就相当于把代码直接编译到你的库或者是你的可执行文件当中，也就是看不到你的第三方库的情况，这样有什么问题呢，就是你使用的第三方开源库，你得看它提供的协议，它的协议是否支持你用静态链接，因为大部分开源库在你没有商业授权的情况下，是不允许静态链接的，这属于侵权，静态链接就是你看不到，所以对于绝大部分开源系统，你要使用它，基本都得动态链接，因为静态编译之后，你是看不出来用什么了，用的是哪一个库，这是我们使用别人的开源的，那么使用自己的静态库有哪些问题呢，有两个问题，第一个，静态库类似于.o，你在编译静态库的时候，需要把它依赖的库文件拉进来，在windows下会有一个比较容易发生的冲突，在windows当中涉及到线程库，windows中的线程库有两种，分别是静态的和动态的，然后它们各自又下辖debug版和release版，这里面比较麻烦，如果你的静态库引用的是静态版本的线程库，然后你这个静态库是不是要被另外的程序调用，那个程序调用的时候用的是动态版的线程库，这时，编译就会报错，因为相当于被引用了两遍，动态库没这个问题，（不知道讲的什么几把，感觉没用），动态库的调用和实现是分开的，就是说我只调用你的接口，实现你自己做，不冲突，而静态库是要把你所有的代码都要编到我的代码里面，就相当于我里面有了两份代码，而动态库我只是动态调用你，我并不把你编进来，我只编了个地址，所以不会产生冲突，第二个，刚才讲了，静态库是把你的代码全部复制进来，可想而知，你生成的文件会比较大，其实这个不算问题，因为动态库，你放那边也是大，这里最主要的就是链接的时间会比较长，因为你是静态链接，代码中调用了静态库中的函数的地方都要复制过去，如果是动态库，我们只要复制一个地址，这个速度很快的，来比较一下，如果你用静态库，假设是10分钟，如果你用动态库，可能1分钟就解决了，所以当你每次都要编很长时间的时候，你看一下是不是静态库用多了。所以这里涉及到三个问题，版权问题，依赖库的问题，编译时间的问题。用静态库的好处，就是看不到那么多动态库，在运行的时候不需要去加载动态库，动态库在运行的时候必须提供可执行程序，在linux环境下，你必须指定好动态库这个固定的路径，把它放在环境变量中或者是把它编到可执行程序里面去，所以在在运行阶段，动态库相对麻烦，静态库没那么多事，静态库是编译阶段麻烦

动态库：libxxx.so，链接的时候，我们不需要去指定时链接静态库还是动态库，指定好路径就行（乱讲是吧）

头文件作用：链接阶段发挥作用，链接的时候去所有链接文件中，根据函数名字来查找你要用的API