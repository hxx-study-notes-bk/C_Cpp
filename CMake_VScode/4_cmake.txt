安装：sudo apt install cmake
也可以自己搞个编译好的cmake包，然后在~/.bashrc中指定环境变量，然后用source刷新一下
export PATH=/home/xinxin/share/Study/0_environment/cmake-3.25.1-linux-x86_64/bin:$PATH
查看版本：cmake --version



下一级的CMakeLists.txt里定义的变量，上一级的CMakeLists.txt是能看到的
在下一级的CMakeLists.txt里，vsp ../CMakeLists.txt，可以同时查看两个CMakeLists.txt
vim main.c ./src/fun.c -O，也可查看多个文件



cmake，make，gcc的关系：
1.由cmake读取CMakeLists.txt，生成临时文件CMakeCache和makefile
2.make调用gcc编译makefile，生成bin/so
注：在make编译makefile时，make会去读取makefile的配置信息，然后makefile会去引用CMakeLists.txt和CMakeCache中的内容



cmake .   ：执行当前目录的CMakeLists.txt，用于内部构建
cmake ..   ：执行上一级目录的CMakeLists.txt，用于外部构建
执行之后会生成makefile，再执行make即可得到可执行文件或so
忘了可以回顾视频，P19



语法特性介绍
参数用括弧扩起，参数之间使用空格或分号分开：指令(参数1 参数2)
指令跟大小写无关，参数和变量和大小写相关
变量使用 ${} 的方式取值，但在if控制语句中是直接使用变量名



CMake常用变量
编译类型（Debug，Release）：CMAKE_BUILD_TYPE
gcc编译选项：CMAKE_C_FLAGS
g++编译选项：CMAKE_CXX_FLAGS
指定C编译器：CMAKE_C_COMPILER
指定C++编译器：CMAKE_CXX_COMPILER



重要指令
指定cmake的最小版本要求：cmake_minimum_required(VERSION 3.5.1)
定义工程名称，并可指定工程支持的语言：project(HELLOWORLD [C][CXX][Java])
显示定义变量：set(SRC sayhello.cpp hello.cpp)
添加编译参数：add_compile_options(-Wall -std=c++11 -O2)
向工程添加库文件搜索路径：link_directories(/usr/lib/mylibfolder ./lib)
将一个目录下所有的源文件存储在一个变量中，然后整体来用：aux_source_directory(. SRC)      add_executable(main ${SRC})
向工程添加头文件搜索路径：include_directories(/usr/include/myincludefolder ./include)
生成可执行文件：add_executable(main main.cpp)
为可执行文件链上库：target_link_libraries(main hello)

生成库文件libhello.so：add_library(hello SHARED ${SRC})
添加src子目录，src中需有一个CMakeLists.txt：add_subdirectory(src)



例子
cmake_minimum_required(VERSION 3.5.1)
project(HELLO_WORLD)

set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -Wall -O3 -g")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11 -O3 -g")

# set(GCC_PATH /home/xinxin/share/Study/1_toolchain/gcc/linux-x86)
# set(COMPILER ${GCC_PATH}/aarch64/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin)
# set(CMAKE_C_COMPILER ${COMPILER}/aarch64-linux-gnu-gcc)
# set(CMAKE_CXX_COMPILER ${COMPILER}/aarch64-linux-gnu-g++)
# 上面那四句用的编译链生成的可执行文件只能跑在板端，如果想跑在linux的PC端，则用下面的
set(CMAKE_C_COMPILER /usr/bin/gcc)
set(CMAKE_CXX_COMPILER /usr/bin/g++)

link_directories(/lib /usr/lib ./lib)#库
aux_source_directory(. SRC_LIST)#源
include_directories(/usr/include ./include)#头

#link_libraries(nnsdk nndemo jpeg)#链
add_executable(main_bin ${SRC_LIST})
target_link_libraries(main_bin -lpthread -lm -ldl)